using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleEngine
{
    /* Drawer is capable of drawing program GUI in console.
     * It can draw main window and small menus.
     */

    public class Drawer
    {
        private static Drawer _instance;
        protected Drawer() { }
        public static Drawer GetInstance()
        {
            return _instance ?? (_instance = new Drawer());
        }

        public EngineLanguageData ELanguage { get; private set; } = new EngineLanguageData(Language.Eng);


        // PageSize shows how many lines can fit one page.
        public uint PageSize => 12;

        public uint MenuListingSize => 5;

        public void SetLanguage(Language language)
        {
            ELanguage = new EngineLanguageData(language);
        }

        // Enum is used for easier saving of WIDTH and HEIGHT.
        // Usage: (uint)AppWidth returns 100.
        enum Sizes : uint
        {
            AppWidth = 100,
            AppHeight = 25
        }

        /// <summary>
        /// Gets number of bytes and returns string with converted bytes
        /// </summary>
        /// <param name="bytes"> number of bytes </param>
        /// <returns> example: 10GB </returns>
        private static string FormatBytes(long bytes)
        {
            string[] suffix = { "B", "KB", "MB", "GB", "TB" };
            int i;
            double dblSByte = bytes;
            for (i = 0; i < suffix.Length && bytes >= 1024; i++, bytes /= 1024)
            {
                dblSByte = bytes / 1024.0;
            }

            return $"{dblSByte:0.##} {suffix[i]}";
        }

        /// <summary>
        /// Method generates line that looks like this: +-----------------------+
        ///                                             |<-  `width` dashes   ->|
        /// </summary>
        /// <param name="width"> The width of the line </param>
        private string generateLine(uint width)
        {
            string line = "";
            line += "+";
            line += string.Concat(Enumerable.Repeat("-", (int)width));
            line += "+";
            return line;
        }

        /// <summary>
        /// Method generates Dictionary, so it could be used in DrawSector
        /// </summary>
        /// <param name="startPoint"> First row</param>
        /// <param name="dataLines"> Data to print</param>
        /// <returns>
        ///     Dictionary: { "row_where_to_print" : "data_to_print"}
        /// </returns>
        private SortedDictionary<int, string> GenerateDictionaryOfDataLines(int startPoint, string[] dataLines)
        {
            SortedDictionary<int, string> data = new SortedDictionary<int, string>();
            int j = 0;
            for (int i = startPoint; i < dataLines.Length + startPoint; i++)
            {
                data.Add(i, dataLines[j]);
                j++;
            }
            return data;
        }

        /// <summary>
        /// Method generates empty string of size width
        /// </summary>
        /// <param name="width"> size of the string </param>
        /// <returns></returns>
        private string GenerateEmpty(uint width)
        {
            return string.Concat(Enumerable.Repeat(" ", (int)width));
        }

        /// <summary>
        /// Method prints the string of `width` spaces
        /// </summary>
        /// <param name="width"> The width of the line </param>
        private void DrawEmpty(uint width)
        {
            Console.Write(GenerateEmpty(width));
        }

        /// <summary>
        ///  Method prints an empty row: |                     |
        ///                              |<-  `width` spaces ->|
        /// </summary>
        /// <param name="width"> The width of the line </param>
        private void DrawEmptyRow(uint width)
        {
            Console.Write("|");
            DrawEmpty(width);
            Console.WriteLine("|");
        }

        /// <summary>
        ///    Method prints a line generated by generateLine() method
        /// </summary>
        /// <param name="width"> The width of the line </param>
        private void DrawLine(uint width)
        {
            Console.WriteLine(generateLine(width));
        }


        /// <summary>
        /// Method returns max string length + 2
        /// Used in DrawLeftMenu only
        /// </summary>
        /// <param name="strings"> all strings </param>
        /// <param name="title"> if length of the title > strings - return it </param>
        /// <returns></returns>
        private uint MaxStringSize(string[] strings, string title = null)
        {
            uint max = (uint)strings[0].Length;
            foreach (var s in strings)
            {
                if (s.Length > max)
                    max = (uint)s.Length;
            }
            if (max % 2 != 0)
                max += 1;
            if (title != null)
            {
                max = (uint)Math.Max(max, title.Length);
                max += max % 2 == 0 ? 0u : 1u;
            }
            return max;
        }

        /// <summary>
        /// Returns height of the LeftMenu
        /// Method used in DrawLeftMenu only.
        /// </summary>
        /// <param name="strings"> all the strings </param>
        /// <param name="offset">extra offset </param>
        /// <returns> height of the LeftMenu </returns>
        public uint MaxHeightSize(string[] strings, uint offset = 1)
        {
            return (uint)strings.Length + offset;
        }

        /// <summary>
        /// Method generates Menu from items List.
        /// </summary>
        /// <param name="items"> menu items </param>
        /// <returns> generated menu </returns>
        private string[] GenerateItemLines(List<Item> items)
        {
            var lines = new string[items.Count];
            int i = 0;
            foreach (var item in items)
            {
                if (item.Active)
                {
                    if (item.ColorContext().Contains("\u001b"))
                        lines[i++] = new string(' ', 8) + item.ColorContext();
                    else
                        lines[i++] = "* " + item.Content;
                }
                else
                {
                    lines[i++] = item.Content;
                }
            }

            return lines;
        }


        /// <summary>
        /// Method generates string with data placed in the middle
        ///     of the generated string.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        private string GenerateStringWithData(uint width, string data)
        {

            if (data.Length >= width)
            {
                return data;
            }
            string resData = "";
            int left = (int)width / 2 - data.Length / 2;
            int extra = data.Length % 2 == 0 ? 0 : 1;
            int right = Math.Max((int)width / 2 - data.Length / 2 - extra, 0);

            resData += "|";
            resData += GenerateEmpty((uint)left);
            resData += data;
            if (data.Contains("\u001b"))
                resData += new string(' ', 8);

            resData += GenerateEmpty((uint)right) + "|";

            return resData;
        }

        /// <summary>
        /// Method prints data in the middle of the screen
        ///     It calculates distance from left side to the beginning of the data to output
        ///       and then prints data like this: "|             data_string            |"
        ///                                        |<-  left  ->|           |<- right ->|
        /// </summary>
        /// <param name="width"> The width of the row</param>
        /// <param name="data"> data string to print</param>
        private void DrawData(uint width, string data)
        {
            Console.WriteLine(GenerateStringWithData(width, data));
        }

        /// <summary>
        /// The most important method, that prints all the data in the Console.
        /// </summary>
        /// <param name="height"> height of the Sector</param>
        /// <param name="width"> width of the Sector</param>
        /// <param name="data"> data as dictionary </param>
        private void DrawSector(uint height = (uint)Sizes.AppHeight, uint width = (uint)Sizes.AppWidth,
            SortedDictionary<int, string> data = null)
        {
            DrawLine(width);
            if (data == null)
            {
                for (int i = 0; i < height; i++)
                {
                    DrawEmptyRow((uint)Sizes.AppWidth);
                }
            }
            else
            {
                for (int i = 0; i < height; i++)
                {
                    if (data.ContainsKey(i))
                        DrawData(width, data[i]);
                    else
                        DrawEmptyRow((uint)Sizes.AppWidth);
                }
            }
            DrawLine(width);
        }

        /// <summary>
        /// Method adds menu at the left part of the screen.
        /// </summary>
        /// <param name="height"> height of menu </param>
        /// <param name="width"> width of the menu !!!can be only even!!!
        ///                                        !!!should never be less than size of any string inside menu!!! </param>
        /// <param name="startingPoint"> from what line to start drawing menu </param>
        /// <param name="menuData"> strings in menu </param>
        /// <param name="data"> main data dict </param>
        private void DrawLeftMenu(uint height, uint width, uint startingPoint, List<string> menuData, ref SortedDictionary<int, string> data)
        {
            /*TODO: now DrawLeftMenu can only draw menu with width Sizes.WIDTH
              TODO: check lines 250, 276 - change it to custom */

            var keys = new List<int>(data.Keys);
            foreach (var key in keys)
            {
                data[key] = GenerateStringWithData((uint)Sizes.AppWidth, data[key]);
            }

            // Iteration over menuData.
            int menuIterator = 0;

            bool drawCheck = false;

            for (int lineCounter = 1; lineCounter <= (uint)Sizes.AppHeight; lineCounter++)
            {
                if (lineCounter == startingPoint + height || lineCounter == startingPoint)
                {
                    drawCheck = !drawCheck;
                    // If line has any pre rendered data - append our menu.
                    if (data.ContainsKey(lineCounter))
                    {
                        data[lineCounter] = data[lineCounter].Remove(0, (int)width + 2);
                        data[lineCounter] = data[lineCounter].Insert(0, generateLine(width));
                    }
                    // If line is empty - create new line with spaces. 
                    else
                    {
                        string line = generateLine(width)
                                      + string.Concat(Enumerable.Repeat(" ", (int)((uint)Sizes.AppWidth - width) - 1))
                                      + "|";
                        data.Add(lineCounter, line);
                    }
                    if (lineCounter == startingPoint + height)
                        break;
                }
                else if (drawCheck)
                {
                    if (data.ContainsKey(lineCounter))
                    {
                        data[lineCounter] = data[lineCounter].Remove(0, (int)width + 2);
                        // If any menu strings left to add.
                        if (menuIterator < menuData.Count)
                            data[lineCounter] = data[lineCounter].Insert(0,
                                GenerateStringWithData(width, menuData[menuIterator++]));
                        else
                            data[lineCounter] = data[lineCounter].Insert(0, "|" + GenerateEmpty(width)
                                + "|");
                    }
                    else
                    {
                        if (menuIterator < menuData.Count)
                        {
                            string control = GenerateStringWithData(width, menuData[menuIterator++]);
                            control += GenerateEmpty((uint)Sizes.AppWidth - width - 1) + "|";
                            data.Add(lineCounter, GenerateStringWithData((uint)Sizes.AppWidth, control));
                        }
                        else
                            data.Add(lineCounter, "|" + GenerateEmpty(width)
                                + "|" + GenerateEmpty((uint)Sizes.AppWidth - width - 1) + "|");
                    }
                }

            }
        }
        //===============================| Drawing public Functions |============================
        // Down here all the methods that just take generated data and print it using drawSector.

        public void DrawIntro(string[] introStrings = null, bool wait = true)
        {
            Console.Clear();

            var lines = introStrings ?? ELanguage.IntroInfo();

            var data = GenerateDictionaryOfDataLines((int)(uint)Sizes.AppHeight / 2, lines);
            DrawSector(data: data);
            if (wait)
                Console.ReadKey(true);
        }
        public void DrawInstruction()
        {
            Console.Clear();
            var lines = ELanguage.DrawInstruction();
            var data = GenerateDictionaryOfDataLines(1, lines);
            data[3] = generateLine((uint)Sizes.AppWidth);
            data[14] = generateLine((uint)Sizes.AppWidth);
            DrawSector(data: data);
            Console.ReadKey(true);
        }

        public void Exit()
        {
            Console.Clear();
            var lines = ELanguage.ExitMessage();
            var data = GenerateDictionaryOfDataLines(5, lines);
            DrawSector(data: data);
            Console.ReadKey(true);
        }

        //=========================================| Views |=======================================================
        // View is a template, that is filled by user.

        private void DrawMenuView(SortedDictionary<int, string> data, string[] additionalInfo = null)
        {
            if (additionalInfo != null && additionalInfo.Length > 0)
            {
                var menuData = new List<string>(additionalInfo);
                DrawLeftMenu(
                    MaxHeightSize(additionalInfo.ToArray()),
                    MaxStringSize(additionalInfo.ToArray()) + 2,
                    10,
                    menuData,
                    ref data
                );
            }
            DrawSector(data: data);
        }
        public void DrawMenuView(string title, List<Item> menuList, string[] additionalInfo)
        {
            Console.Clear();
            var lines = GenerateItemLines(menuList);
            var data = GenerateDictionaryOfDataLines(7, lines);
            data.Add(1, title);

            DrawMenuView(data, additionalInfo);
            //if (additionalInfo != null && additionalInfo.Length > 0)
            //{
            //    List<string> menuData = new List<string>(additionalInfo);
            //    DrawLeftMenu(
            //        MaxHeightSize(additionalInfo.ToArray()),
            //        MaxStringSize(additionalInfo.ToArray()) + 2,
            //        6,
            //        menuData,
            //        ref data
            //        );
            //}
            //DrawSector(data: data);
        }

        public void DrawMenuView(string title, List<Item> menuList, List<string> additionalInfo, List<string> headerInfo)
        {
            Console.Clear();
            var lines = GenerateItemLines(menuList);
            var data = GenerateDictionaryOfDataLines(7, lines);
            data.Add(1, title);
            if (headerInfo != null && headerInfo.Count > 0)
            {
                var menuData = new List<string>(headerInfo);
                DrawLeftMenu(
                    MaxHeightSize(headerInfo.ToArray()),
                    MaxStringSize(headerInfo.ToArray()) + 2,
                    4,
                    menuData,
                    ref data
                    );
            }
            DrawMenuView(data, additionalInfo.ToArray());
            //if (additionalInfo != null && additionalInfo.Count > 0)
            //{
            //    var menuData = new List<string>(additionalInfo);
            //    DrawLeftMenu(
            //        MaxHeightSize(additionalInfo.ToArray()),
            //        MaxStringSize(additionalInfo.ToArray()) + 2,
            //        10,
            //        menuData,
            //        ref data
            //    );
            //}
            //DrawSector(data: data);
        }

        public void DrawMenuWithPathView(string title, List<Item> menuList, string[] additionalInfo, string path)
        {
            Console.Clear();
            var lines = GenerateItemLines(menuList);
            var data = GenerateDictionaryOfDataLines(7, lines);
            var menuData = new List<string> { path };

            data.Add(1, title);

            DrawLeftMenu(2, MaxStringSize(menuData.ToArray()) + 2, 2, menuData, ref data);

            DrawMenuView(data, additionalInfo);
        }
        public void DrawInfoView(string title, string[] lines, bool wait = true, string[] addInfo = null)
        {
            Console.Clear();
            var menuData = new List<string>(lines);
            var data = new SortedDictionary<int, string>();

            data.Add(2, title);
            DrawLeftMenu(
                MaxHeightSize(lines),
                (uint)Sizes.AppWidth - 2,
                10,
                menuData,
                ref data
                );
            if (addInfo != null)
            {
                var addMenu = new List<string>(addInfo);
                DrawLeftMenu(
                    MaxHeightSize(addInfo),
                    MaxStringSize(addInfo) + 2,
                    5,
                    addMenu,
                    ref data
                    );
            }

            DrawSector(data: data);
            if (wait)
                Console.ReadKey(true);
        }


        public void DrawListingView(string title, string[] lines, bool wait = true)
        {
            Console.Clear();
            var data = GenerateDictionaryOfDataLines(5, lines);
            DrawSector(height: Math.Max((uint)Sizes.AppHeight, (uint)lines.Length), data: data);
            if (wait)
                Console.ReadKey(true);
        }

        public void DrawError(Exception e, string message = null)
        {
            Console.Clear();
            var menuData = new List<string>() { e.Message };
            if (message != null)
                menuData.Add(message);

            var data = new SortedDictionary<int, string> { { 2, ELanguage.Error() } };
            DrawLeftMenu(
                2,
                (uint)Sizes.AppWidth - 2,
                10,
                menuData,
                ref data
                );
            DrawSector(data: data);
            Console.ReadKey(true);
        }


    }
}
